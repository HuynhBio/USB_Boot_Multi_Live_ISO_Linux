loadfont "$prefix/unicode.pf2"
unset pager
# Load modules
insmod all_video ; insmod video_bochs ; insmod video_cirrus ; insmod font ; insmod gfxterm ; insmod gfxmenu
insmod gettext ; insmod jpeg ; insmod png ; insmod part_msdos ; insmod ntfs ; insmod iso9660 ; insmod loopback
insmod linux ; insmod regexp ; insmod read ; insmod bsd ; insmod halt ; insmod reboot
#insmod chain ; insmod drivemap ; insmod ls ; insmod ext2
if [ "${grub_platform}" == "efi" ]; then insmod linuxefi; fi


#NOTES
#KEY: L64=Legacy 64-bit, L32=Legacy 32-bit, U64=UEFI 64-bit, U32=UEFI 32-bit
#gfxpayload - controls the video mode in which the Linux kernel starts up, replacing the ‘vga=’ boot option (see linux). 
#           - ‘text’ - boot in normal text mode, ‘keep’ to preserve the graphics mode set using ‘gfxmode’, or any of the permitted values for ‘gfxmode’ to set a particular graphics mode (see gfxmode).
#to pause until user presses ENTER, use 'read'
#undocumented operands!!! -ot, -nt, -pgt, -plt, -lt, -le, -gt, -ge, -eq, -ne, -su, and, or, "=", "!=", "<>", ">=", ">", "<=", "<"
# same as bash (but not stated anywhere!) https://linuxacademy.com/blog/linux/conditions-in-bash-scripting-if-statements/
# use load_env fred  to load variable fred, and save_env fred to save it

#CHANGE THIS IF NOT USING PARTITION 2 or if different folder for ISOs, etc.
set isopath=/_ISO
set root2=(hd0,msdos2)
if [ -e (hd0,msdos1)/_ISO/MAINMENU/grub2 ] ; then set root2=(hd0,msdos1) ;fi
set isofpath=$root2$isopath
set isoextpath=/ISO_Extract

# keepisoxxxx will always point to base folder - e.g. \_ISO
set keepisopath=$isopath ; set keepisofpath=$isofpath
export keepisopath keepisofpath
# Required to have these available in other configfile files
export isopath isofpath root2 isoextpath icondir locale_dir NOPASSMARK

#get UUID of 2nd partition
search --file /g2ldr --set=root
probe -u $root2 --set=rootuuid
export rootuuid

#echo check insmod ok?
#read

# ######## CHECK_MNU_FOLDER FUNCTION ##########
#function to check if the MNU subfolder has the target file - sets isofile, ipf and ip
#all .grub2 menus should set isoname and then call this function
function CHECK_MNU_FOLDER { 
	set ip=$isopath
	set ipf=$isofpath 
	set isofile="$ip/$isoname"
	unset ip1
	search.file $isopath/MNU/$isoname ip1
	# get rid of error message (how to redirect to null??)
	clear
	if [ ! "${ip1}" = "" ]; then
		set ip=$isopath/MNU 
		set ipf=$isofpath/MNU
		set isofile="$ip/$isoname"
	fi
	if [ -e $isofpath ] ; then 
		echo Found $isofile - please wait...
	else
		echo ERROR (CHECK_MNU_FOLDER): $isofile not found!
		echo "Press [ENTER] to continue..."
		read
	fi
	unset ip1
}
# ##############################################


if [ "$disable_gfxterm" != true ]; then
  insmod all_video
  #gfxmode=1920x1080
  if terminal_output --append gfxterm
  then
      terminal_output --remove console
  fi
fi
if [ "${grub_platform}" == "pc" ]; then
	insmod vbe
	insmod vga
	insmod video_bochs
	insmod video_cirrus
fi
if [ "${grub_platform}" == "efi" ]; then
	insmod efi_gop
	insmod efi_uga
fi


# DEFINE VARIABLES FOR MBR\EFI and 32/64-bit
set BIT64=false; set BIT32=false; set MBR=false; set EFI=false; set EFI64=false; set EFI32=false; set MBR32=false; set MBR64=false
set BIT32=true
if cpuid -l; then set BIT64=true; fi
if [ "${grub_cpu}" == "x86_64" ]; then set BIT64=true; fi
if $BIT64 == true ; then set BIT32=false ; fi
if [ "${grub_platform}" == "pc" ]; then set MBR=true; fi
if [ "${grub_platform}" == "efi" ]; then set EFI=true; fi
if [ "${grub_cpu}" == "x86_64" and $EFI = true ]; then set EFI64=true; fi
if [ "${grub_cpu}" == "i386" and $EFI = true ]; then set EFI32=true; fi
if [ $BIT64 = true and $MBR = true ]; then set MBR64=true; fi
if [ $BIT32 = true and $MBR = true ]; then set MBR32=true; fi
probe -f $root2 --set FAT
if [ "$FAT" = "fat" ] ; then set FAT=true ; else set FAT=false; fi
export MBR EFI MBR32 MBR64 EFI32 EFI64 BIT32 BIT64 FAT
#Examples
if [ $BIT64 = true and $MBR = true ] ; then echo 64-bit MBR ; fi
if [ $BIT64 = true and $EFI = true ] ; then echo 64-bit EFI ; fi
if [ $BIT32 = true and $MBR = true ] ; then echo 32-bit MBR ; fi
if [ $BIT32 = true and $EFI = true ] ; then echo 32-bit EFI ; fi
if [ $FAT = true ] ; then echo FAT FILESYSTEM DETECTED; fi
if [ $FAT = false ] ; then echo NTFS FILESYSTEM DETECTED; fi
#if $BIT64 ; then echo 64-bit ; fi
#if $BIT32 ; then echo 32-bit ; fi

probe -u $root2 --set=root2uuid
export root2uuid


# showdelay allows user to see what user .cfg files have been added
set showdelay=0
set default=0
#use -1 for no timeout
set timeout=-1
#no paging
set pager=0
set lang=en

#security - can be set in defaults.txt
#set superusers="easy2boot,root"
#password easy2boot easy2boot
#password root easy2boot
#export superusers password

set gfxmode=1024x768,800x600,auto
set gfxpayload=text
set grub2win_parm=acircle
#set grub2win_parm=ascrollbar

# LOAD THEME AND SET ICON FOLDER AND TRANSLATION FOLDER
set theme=$prefix/themes/grub2_e2b/theme.txt
set locale_dir=$prefix/locale
set icondir=$prefix/themes/icons

# set text menu colours (colour/bg-colour) if theme not used, user can define colours too.
if [ "${menu_color_highlight}" == "" ]; then menu_color_highlight=blue/white ; fi
if [ "${menu_color_normal}" == "" ]; then menu_color_normal=red/black ; fi
if [ "${color_normal}" == "" ]; then color_normal=yellow/black ; fi
export menu_color_highlight menu_color_normal color_normal

#get user config, defaults, etc.
unset fnd
for cfg_file in $isofpath/MAINMENU/grub2/defaults.txt; do
    echo "Found $cfg_file"
    source $cfg_file
	set fnd=1
done
export showdelay

# If user has defined USETHEME in defaults.txt then use text menu
if [ "${USETHEME}" = "" ]; then 
	unset theme
else
	export theme
fi

# ########## START MENU #################
#MEMTEST PassMark 

if [ "$NOPASSMARK" = "" ]; then
if $EFI64 ; then
if [ -e "/memtest86/BOOTX64.EFI" ]; then
menuentry "PassMark MemTest86 (64)   [M]" --unrestricted --class icon-memtest --hotkey m {
search --no-floppy --file --set=root /memtest86/BOOTX64.EFI
chainloader /memtest86/BOOTX64.EFI
boot
}
fi
fi
if $EFI32 ; then
if [ -e "/memtest86/BOOTIA32.EFI" ]; then
menuentry "PassMark MemTest86 (32)   [M]" --unrestricted --class icon-memtest --hotkey m {
search --no-floppy --file --set=root /memtest86/BOOTIA32.EFI
chainloader /memtest86/BOOTIA32.EFI
boot
}
fi
fi
fi

# ######## GET MENU FILES  ########
set isofpath=${isofpath}/MAINMENU
set isopath=${isopath}/MAINMENU
set ip=$isopath ; set ifp=$isofpath
echo Looking for .grub2 files in $isopath...
for cfg_file in $isofpath/grub2/*.grub2; do
    echo "Found $cfg_file"
    source $cfg_file
	set fnd=1
done
#Add in all other menus
#for cfg_file in $prefix/*_menu.cfg; do
#    echo "Found $cfg_file"
#    source $cfg_file
#	set fnd=1
#done
# NOW MNU sub-folder
set isopath=${isopath}/MNU
set isofpath=${isofpath}/MNU
echo Looking for .grub2 files in $isopath...
for cfg_file in $isofpath/grub2/*.grub2; do
    echo "Found $cfg_file"
    source $cfg_file
	set fnd=1
done
#for cfg_file in $prefix/*_menu.cfg; do
#   echo "Found $cfg_file"
#    source $cfg_file
#	set fnd=1
#done
# Restore back to MAINMENU
set isopath=$ip ; set isofpath=$ifp

if [ $fnd = "1" ]; then 
if [ $showdelay -ge 10 ]; then
	echo "Press [ENTER] to continue..."
	read
else
	sleep $showdelay;
fi
fi
unset fnd

# ##### END OF MENU COLLECTING #####
#if [ $NOAV -ne true ] ; then
#menuentry "Antivirus Menu            [A]" --unrestricted --class eset --hotkey a {configfile "${prefix}/antivirus.cfg"} ; fi
#if [ $NOBACKUP -ne true ] ; then
#menuentry "Backup Menu               [B]" --unrestricted --class icon-ads --hotkey b {configfile "${prefix}/backup.cfg"} ; fi
#if [ $NOLINUX -ne true ] ; then
#menuentry "Linux Menu                [L]" --unrestricted --class icon-linux --hotkey l {configfile "${prefix}/linux.cfg"} ; fi
#if [ $NOUTILS -ne true ] ; then
#menuentry "Utilities Menu            [U]" --unrestricted --class hirens --hotkey u {configfile "${prefix}/utilities.cfg"} ; fi


if [ $NOHDBOOT -ne true ] ; then
if $MBR; then
menuentry "Boot to HDD0              [F7]" --unrestricted --class display --hotkey f7 {
	menulst="map (hd0) (hd1); map (hd1) (hd0); map --hook; chainloader (hd0)+1; rootnoverify (hd0); boot"
	linux16 ($root)/grub.exe --config-file=$menulst
}
fi
fi
menuentry "Reboot                    [F9]" --unrestricted --class icon-reboot --hotkey f9{	echo "System rebooting..."; 	reboot;}
menuentry "Shutdown                  [F10]" --unrestricted --class icon-shutdown --hotkey f10{	echo "System shutting down...";	halt;}


if $MBR ; then
if [ -e "/boot/grub/invaders" ]; then
menuentry "Invaders                  [I]" --unrestricted --class ram --hotkey i {
search --no-floppy --file --set=root /boot/grub/invaders
multiboot /boot/grub/invaders
boot
}
fi
fi







